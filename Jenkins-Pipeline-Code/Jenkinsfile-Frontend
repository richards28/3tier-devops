pipeline {
    agent any 
    tools {
        jdk 'JDK'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT-ID')
        AWS_ECR_REPO_NAME = credentials('ECR-Repo-1')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/richards28/3tier-devops.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('client') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                       -Dsonar.projectKey=jenkins \
                       -Dsonar.sources=. \
                       -Dsonar.host.url=http://54.226.246.239:9000 \
                       -Dsonar.login=squ_69f89491eb43931acc4707c3b45b260babad34a9 '''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false 
                }
            }
        }
}
        stage('Trivy File Scan') {
            steps {
                dir('client') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('client') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/richards28/3tier-devops.git'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "3tier-devops"
                GIT_USER_NAME = "richards28"
            }
            steps {
                dir('kubernetes-files') {
                    withCredentials([string(credentialsId: 'git-token', variable: 'git_token')]) {
                        sh '''
                            git config user.email "richirocks96@gmail.com"
                            git config user.name "richards28"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            sed -i "s#image:.*#image: $REPOSITORY_URI$AWS_ECR_REPO_NAME:$BUILD_NUMBER#g" frontend-deploy-service.yaml
                            git add .
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${git_token}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
        
                        '''
                    }
                }
            }
        }
    }
}
     
         
